plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "4.0.0.2929"
	id 'jacoco'
	id 'idea'
}

ext {

	set('springdoc', "2.0.2")
	set('lombok', "1.18.22")
	set('mapstruct', "1.5.3.Final")
	set('lombokMapstructBindingVersion', "0.2.0")
	set('junit', "4.13.1")
	set('webjars', "5.18.2")
}
group = 'br.com.foursales'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral() // Apenas o Maven Central
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")

	// Autenticação JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // Usa Jackson para parsing de JWT
	// Certifique-se de que esta versão está disponível no Maven Central

	// Feign Client para comunicação entre serviços
	implementation("org.springframework.cloud:spring-cloud-starter-openfeign:3.1.0") // Especifique a versão

	// Banco de Dados (MySQL)
	runtimeOnly("com.mysql:mysql-connector-j")

	// Kafka
	implementation("org.springframework.kafka:spring-kafka")

	// Elasticsearch
	implementation("org.springframework.boot:spring-boot-starter-data-elasticsearch")

	// Lombok
	compileOnly("org.projectlombok:lombok")
	annotationProcessor("org.projectlombok:lombok")

	// Testes
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.kafka:spring-kafka-test")
	testImplementation "junit:junit:${junit}"
}

test {
	systemProperty "user.language", "en"
	systemProperty "user.country", "US"
	useJUnitPlatform()
}

def jacocoExclusion = [
		'**/annotation/**',
		'**/swagger/**',
		'**/config/**',
		'**/entity/**',
		'**/exception/**',
		'**/mapper/**',
		'**/model/**',
		'**/repository/**',
		'**/enums/**',
		'**/kafka/payload/**',
		'**/Application.java',
		'src/test/java/**'
]

jacocoTestReport {
	dependsOn(test)

	getExecutionData()
			.setFrom(fileTree(buildDir)
					.include("/jacoco/test.exec")
			)

	reports {
		xml.required.set(true)
		html.required.set(true)
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclusion)
		}))
	}
}

check {
	dependsOn jacocoTestCoverageVerification
}

project.tasks["sonarqube"].dependsOn("jacocoTestReport")

sonarqube {
	properties {
		property "sonar.tests", "src/test/java"
		property "sonar.exclusions", jacocoExclusion.join(",")
	}
}

tasks.withType(Test) {
	reports {
		junitXml.required.set(true)
		html.required.set(true)
	}
	useJUnitPlatform()
	systemProperty "user.language", "en"
	systemProperty "user.country", "US"
}
